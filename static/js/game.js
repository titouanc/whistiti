// Generated by CoffeeScript 1.4.0
var Whistiti, err, get_validated_nickname, ok;

ok = function() {
  return null;
};

err = function(reason) {
  return console.log("Error: " + reason);
};

get_validated_nickname = function() {
  var nick;
  nick = $('#nickname').val();
  if (nick.length === 0) {
    alert("Entrez un pseudonyme pour la partie");
    return null;
  }
  return nick;
};

Whistiti = function(wamp_url, realm) {
  var card_template, connection, hidePanel, queued_template, scores_template, showPanel, uuid;
  if (wamp_url == null) {
    wamp_url = "ws://localhost:8080/ws";
  }
  if (realm == null) {
    realm = "whistiti";
  }
  connection = new autobahn.Connection({
    url: wamp_url,
    realm: "whistiti"
  });
  uuid = null;
  card_template = Handlebars.compile($('#card-template').html());
  queued_template = Handlebars.compile($('#queued-template').html());
  scores_template = Handlebars.compile($('#scores-template').html());
  showPanel = function(name) {
    return $("#" + name + "-panel").removeClass('hidden');
  };
  hidePanel = function(name) {
    return $("#" + name + "-panel").addClass('hidden');
  };
  connection.onopen = function(session, details) {
    var remote_call, show_cards, show_my_cards, show_players, show_queue_size;
    remote_call = function(func, args) {
      if (args == null) {
        args = [];
      }
      showPanel("loading");
      return session.call(func, args).then(function(ret) {
        hidePanel("loading");
        return ret;
      });
    };
    console.log("Connection opened");
    hidePanel('loading');
    showPanel('join');
    show_queue_size = function(queue_size) {
      $('#queued-panel').html(queued_template({
        'queue_size': queue_size,
        'queue_pct': 25 * queue_size,
        'queue_remain': 4 - queue_size,
        'queue_remain_pct': 25 * (4 - queue_size)
      }));
      return showPanel('queued');
    };
    show_my_cards = function(cards) {
      var card, _i, _len;
      cards.sort(function(a, b) {
        return a - b;
      });
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        $('#hand-content').append("<li>" + (card_template({
          'cardid': card
        })) + "</li>");
      }
      return $('.card').click(function(ev) {
        $('.card.selected').removeClass('selected');
        return $(ev.target).addClass('selected');
      });
    };
    show_players = function(players) {
      var player, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = players.length; _i < _len; _i++) {
        player = players[_i];
        if (player !== get_validated_nickname()) {
          _results.push($('#scores-panel').append(scores_template({
            'player_name': player
          })));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    show_cards = function(cards) {
      var card, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = cards.length; _i < _len; _i++) {
        card = cards[_i];
        _results.push($('#hand-content').append(card_template({
          'cardid': card
        })));
      }
      return _results;
    };
    $('a.bid').click(function(ev) {
      return remote_call('bid', [uuid, $(ev.target).attr('data-id')]).then(function(response) {
        console.log(JSON.stringify(response));
        if (response.error) {
          return alert(response.error);
        }
      });
    });
    return $('#join-button').click(function() {
      var nick;
      nick = get_validated_nickname();
      if (!nick) {
        return;
      }
      console.log("Joining game with nickname " + nick);
      hidePanel('join');
      return remote_call('hello', [nick]).then(function(response) {
        show_queue_size(response.queue_size);
        uuid = response.uuid;
        console.log("Got UUID " + uuid);
        session.subscribe("" + uuid + ".queue_growth", function(response) {
          return show_queue_size(response[0].queue_size);
        }).then(ok, err);
        return session.subscribe("" + uuid + ".start_game", function(response) {
          var game;
          hidePanel('queued');
          game = response[0];
          show_my_cards(game.cards);
          show_players(game.players);
          showPanel('scores');
          showPanel('bid');
          return console.log(JSON.stringify(response));
        }).then(ok, err);
      });
    });
  };
  connection.onclose = function(reason, details) {
    return console.log("Connection lost (" + reason + ")");
  };
  return connection.open();
};

$(document).ready(function() {
  return Whistiti();
});
